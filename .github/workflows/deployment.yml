name: driftmitigation engine continuous deployment (CD)
on:
  push:
    branches:
      - dev
      - prod

jobs:
  zip-tf-modules-and-send-to-gcs-and-s3:
    runs-on: ubuntu-latest
    container: python:3.10.1-slim-buster
    timeout-minutes: 3

    permissions:
      contents: 'read'
      id-token: 'write'

    env:
      ENV: ${{ github.ref_name }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip3 install -r deployment_scripts/requirements.txt

      - id: uppercase_env
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.ref_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: "arn:aws:iam::${{ secrets[format('ACCOUNT_ID_{0}', steps.uppercase_env.outputs.uppercase)] }}:role/${{ secrets.AWS_ROLE_NAME }}"
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ZIP Modules and ship to S3
        run: |
          python3 deployment_scripts/main.py
  
  
#  go-binary-to-aws-elastic-container-repository:
#    runs-on: ubuntu-latest
#    timeout-minutes: 8
#
#    permissions:
#      contents: "read"
#      id-token: "write"
#
#    steps:
#      - name: Checkout branch
#        uses: actions/checkout@v3
#
#      - id: uppercase_env
#        uses: ASzc/change-string-case-action@v5
#        with:
#          string: ${{ github.ref_name }}
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          role-to-assume: "arn:aws:iam::${{ secrets[format('ACCOUNT_ID_{0}', steps.uppercase_env.outputs.uppercase)] }}:role/${{ secrets.AWS_ROLE_NAME }}"
#          aws-region: ${{ secrets.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr-public
#        uses: aws-actions/amazon-ecr-login@v1
#        with:
#          registry-type: public
#
#      - name: Build, tag, and push docker image to Amazon ECR
#        env:
#          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
#          REGISTRY_ALIAS: ${{ secrets[format('REGISTRY_ALIAS_{0}', steps.uppercase_env.outputs.uppercase)] }}
#          REPOSITORY: "ecs-fargate-task-lambda-trigger-${{ github.ref_name }}"
#        run: |
#          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest .
#          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
